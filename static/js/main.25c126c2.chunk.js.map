{"version":3,"sources":["components/ToDoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ToDoList","props","useState","newTaskTitle","setNewTaskTitle","title","value","onChange","e","currentTarget","onClick","addNewTask","id","tasks","map","t","type","checked","changeTaskStatus","deleteLine","changeFilter","App","TodoList1","v1","TodoList2","filter","TodoLists","setTodoLists","setTasks","TodoListId","newTask","tasksLeft","f","ToDoListId","tl","taskId","newTasks","filteredTasks","todoListsComponents","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAmBO,SAASA,EAASC,GAAmB,IAAD,EACCC,mBAAS,IADV,mBAChCC,EADgC,KAClBC,EADkB,KAGvC,OAAO,gCACH,6BAAKH,EAAMI,QAEX,iDACkB,uBAAOC,MAAOH,EAAcI,SAAU,SAACC,GACrDJ,EAAgBI,EAAEC,cAAcH,UAEhC,wBAAQI,QACJ,WACIT,EAAMU,WAAWR,EAAcF,EAAMW,IACrCR,EAAgB,KAHxB,oBASJ,+BACKH,EAAMY,MAAMC,KAAI,SAACC,GAAD,OAAO,mCAAiBA,EAAEV,MACvC,uBAAOW,KAAK,WAAWC,QAASF,EAAEE,QAASP,QAAS,SAAAF,GAChDP,EAAMiB,iBAAiBV,EAAEC,cAAcQ,QAAShB,EAAMW,GAAIG,EAAEH,OAEhE,wBAAQF,QAAS,kBAAMT,EAAMkB,WAAWJ,EAAEH,GAAIX,EAAMW,KAApD,iBAJ6BG,EAAEH,OAMnC,gCACI,wBAAQF,QAAS,kBAAMT,EAAMmB,aAAa,YAAanB,EAAMW,KAA7D,uBACA,wBAAQF,QAAS,kBAAMT,EAAMmB,aAAa,SAAUnB,EAAMW,KAA1D,oBACA,wBAAQF,QAAS,kBAAMT,EAAMmB,aAAa,MAAOnB,EAAMW,KAAvD,0B,YCuCDS,MAzEf,WAAgB,IAAD,EACLC,EAAYC,cACZC,EAAYD,cAFP,EAGuBrB,mBAAyB,CACvD,CAACU,GAAIU,EAAWjB,MAAO,eAAgBoB,OAAQ,OAC/C,CAACb,GAAIY,EAAWnB,MAAO,UAAWoB,OAAQ,SALnC,mBAGJC,EAHI,KAGOC,EAHP,OAOezB,oBAAQ,mBAC7BoB,EACG,CAAC,CAACV,GAAIW,cAAMlB,MAAO,WAAYY,SAAS,GACpC,CAACL,GAAIW,cAAMlB,MAAO,WAAYY,SAAS,GACvC,CAACL,GAAIW,cAAMlB,MAAO,QAASY,SAAS,KAJd,cAK7BO,EACG,CAAC,CAACZ,GAAIW,cAAMlB,MAAO,oBAAqBY,SAAS,GAC7C,CAACL,GAAIW,cAAMlB,MAAO,OAAQY,SAAS,GACnC,CAACL,GAAIW,cAAMlB,MAAO,QAASY,SAAS,KARd,IAPvB,mBAOJJ,EAPI,KAOGe,EAPH,OAmBiB1B,mBAAqB,OAnBtC,mBAqBX,SAASS,EAAWN,EAAewB,GAC/B,IAAMC,EAAoB,CACtBlB,GAAIW,cACJlB,QACAY,SAAS,GAEbW,EAAS,2BAAIf,GAAL,kBAAagB,EAAb,CAA2BC,GAA3B,mBAAuCjB,EAAMgB,QAGzD,SAASV,EAAWP,EAAYiB,GAC5B,IAAIE,EAAYlB,EAAMgB,GAAYJ,QAAO,SAACO,GAAD,OAAOA,EAAEpB,KAAOA,KACzDgB,EAAS,2BAAIf,GAAL,kBAAagB,EAAaE,KAGtC,SAASX,EAAaK,EAAoBQ,GACtCN,EAAaD,EAAUZ,KAAI,SAAAoB,GAAE,OAAIA,EAAGtB,KAAOqB,EAAV,2BAA2BC,GAA3B,IAA+BT,OAAQA,IAAUS,MAGtF,SAAShB,EAAiBD,EAAkBgB,EAAoBE,GAC5D,IAAIC,EAAWvB,EAAMoB,GAAYnB,KAAI,SAAAC,GAAC,OAAIA,EAAEH,KAAOuB,EAAT,2BAAsBpB,GAAtB,IAAyBE,QAASA,IAAWF,KACvFa,EAAS,2BAAIf,GAAL,kBAAaoB,EAAaG,KAGtC,SAASC,EAAcX,GACnB,MAAyB,cAArBA,EAAUD,OACHZ,EAAMa,EAAUd,IAAIa,QAAO,SAAAV,GAAC,OAAIA,EAAEE,WAEpB,WAArBS,EAAUD,OACHZ,EAAMa,EAAUd,IAAIa,QAAO,SAAAV,GAAC,OAAKA,EAAEE,WAChCJ,EAAMa,EAAUd,IAlDvB,UAqDX,IAAM0B,EAAsBZ,EAAUZ,KAAI,SAAAoB,GACtC,OACI,cAAClC,EAAD,CAAUY,GAAIsB,EAAGtB,GACPa,OAAQS,EAAGT,OACXpB,MAAO6B,EAAG7B,MACVQ,MAAOwB,EAAcH,GACrBf,WAAYA,EACZC,aAAcA,EACdT,WAAYA,EACZO,iBAAkBA,OAIpC,OACI,qBAAKqB,UAAU,MAAf,SACKD,KCpEEE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.25c126c2.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    filter: FilterType\r\n    title: string\r\n    tasks: TaskType[]\r\n    deleteLine: (id: string, TLId: string) => void\r\n    changeFilter: (filter: FilterType, TLid: string) => void\r\n    addNewTask: (title: string, TLId: string) => void\r\n    changeTaskStatus: (checked: boolean, TLId: string, taskId: string) => void\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    checked: boolean\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport function ToDoList(props: PropsType) {\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n\r\n    return <div>\r\n        <h3>{props.title}</h3>\r\n\r\n        <div>\r\n            Add new task: <input value={newTaskTitle} onChange={(e) => {\r\n            setNewTaskTitle(e.currentTarget.value)\r\n        }}/>\r\n            <button onClick={\r\n                () => {\r\n                    props.addNewTask(newTaskTitle, props.id)\r\n                    setNewTaskTitle('')\r\n                }}>\r\n                ADD\r\n            </button>\r\n        </div>\r\n\r\n        <ul>\r\n            {props.tasks.map((t) => <li key={t.id}> {t.title}\r\n                <input type='checkbox' checked={t.checked} onClick={e => {\r\n                    props.changeTaskStatus(e.currentTarget.checked, props.id, t.id)\r\n                }}/>\r\n                <button onClick={() => props.deleteLine(t.id, props.id)}>X</button>\r\n            </li>)}\r\n            <div>\r\n                <button onClick={() => props.changeFilter('completed', props.id)}>COMPLETED</button>\r\n                <button onClick={() => props.changeFilter('active', props.id)}>ACTIVE</button>\r\n                <button onClick={() => props.changeFilter('all', props.id)}>ALL</button>\r\n            </div>\r\n        </ul>\r\n    </div>\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {FilterType, TaskType, ToDoList} from \"./components/ToDoList\";\nimport {v1} from \"uuid\";\n\ntype ToDoListType = {\n    id: string\n    title: string\n    filter: FilterType\n}\nexport type TasksType = {\n    [key: string]: TaskType[]\n}\n\nfunction App() {\n    const TodoList1 = v1()\n    const TodoList2 = v1()\n    const [TodoLists, setTodoLists] = useState<ToDoListType[]>([\n        {id: TodoList1, title: 'Things to do', filter: 'all'},\n        {id: TodoList2, title: 'Hobbies', filter: 'all'}\n    ])\n    const [tasks, setTasks] = useState<TasksType>({\n        [TodoList1]:\n            [{id: v1(), title: 'Meditate', checked: true},\n                {id: v1(), title: 'Work out', checked: true},\n                {id: v1(), title: 'Study', checked: false}],\n        [TodoList2]:\n            [{id: v1(), title: 'Solve the puzzles', checked: true},\n                {id: v1(), title: 'Read', checked: false},\n                {id: v1(), title: 'Sleep', checked: true}]\n    })\n\n\n    const [filter, setFilter] = useState<FilterType>('all')\n\n    function addNewTask(title: string, TodoListId: string) {\n        const newTask: TaskType = {\n            id: v1(),\n            title,\n            checked: false\n        }\n        setTasks({...tasks, [TodoListId]: [newTask, ...tasks[TodoListId]]})\n    }\n\n    function deleteLine(id: string, TodoListId: string) {\n        let tasksLeft = tasks[TodoListId].filter((f) => f.id !== id)\n        setTasks({...tasks, [TodoListId]: tasksLeft})\n    }\n\n    function changeFilter(filter: FilterType, ToDoListId: string) {\n        setTodoLists(TodoLists.map(tl => tl.id === ToDoListId ? {...tl, filter: filter} : tl))\n    }\n\n    function changeTaskStatus(checked: boolean, ToDoListId: string, taskId: string) {\n        let newTasks = tasks[ToDoListId].map(t => t.id === taskId ? {...t, checked: checked} : t)\n        setTasks({...tasks, [ToDoListId]: newTasks})\n    }\n\n    function filteredTasks(TodoLists: ToDoListType) {\n        if (TodoLists.filter === 'completed') {\n            return tasks[TodoLists.id].filter(t => t.checked)\n        }\n        if (TodoLists.filter === 'active') {\n            return tasks[TodoLists.id].filter(t => !t.checked)\n        } else return tasks[TodoLists.id]\n    }\n\n    const todoListsComponents = TodoLists.map(tl => {\n        return (\n            <ToDoList id={tl.id}\n                      filter={tl.filter}\n                      title={tl.title}\n                      tasks={filteredTasks(tl)}\n                      deleteLine={deleteLine}\n                      changeFilter={changeFilter}\n                      addNewTask={addNewTask}\n                      changeTaskStatus={changeTaskStatus}\n            />\n        )\n    });\n    return (\n        <div className=\"App\">\n            {todoListsComponents}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}