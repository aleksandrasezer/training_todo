{"version":3,"sources":["components/AddItemForm/AddItemForm.module.css","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/ToDoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","title","setTitle","value","onChange","e","currentTarget","onClick","onButtonClick","className","s","addItemFormButton","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","ToDoList","changeTodoListTitle","id","addNewTask","tasks","map","t","changeTaskTitle","type","checked","changeTaskStatus","deleteLine","changeFilter","App","TodoList1","v1","TodoList2","filter","todoLists","setTodoLists","setTasks","TodoListId","newTask","tasksLeft","f","ToDoListId","tl","taskId","newTasks","filteredTasks","todoListsComponents","newTodoList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4b97a0a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemFormButton\":\"AddItemForm_addItemFormButton__1eKpx\"};","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './AddItemForm.module.css'\r\n\r\ntype AddItemFormPropsType = {\r\n    onButtonClick: (title: string) => void\r\n}\r\n\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    const [title, setTitle] = useState('')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onButtonClickHandler = () => {\r\n        props.onButtonClick(title)\r\n        setTitle('')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input value={title}\r\n                   onChange={onChangeHandler} />\r\n            <button onClick={onButtonClickHandler}\r\n                    className={s.addItemFormButton}>ADD</button>\r\n        </>\r\n    )\r\n}","import React, {useState, ChangeEvent} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const ActivateEditMode = () => setEditMode(true)\r\n\r\n    const setNewTitle = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return <>\r\n            {editMode\r\n                ? <input onBlur={setNewTitle}\r\n                         value={title}\r\n                         onChange={onChangeHandler} autoFocus/>\r\n                : <span onDoubleClick={ActivateEditMode}>{props.title}</span>}\r\n    </>\r\n}","import React, {MouseEvent} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan/EditableSpan\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    filter: FilterType\r\n    title: string\r\n    tasks: TaskType[]\r\n    deleteLine: (id: string, TLId: string) => void\r\n    changeFilter: (filter: FilterType, TLid: string) => void\r\n    addNewTask: (title: string, TLId: string) => void\r\n    changeTaskStatus: (checked: boolean, TLId: string, taskId: string) => void\r\n    changeTaskTitle: (title: string, TLId: string, taskId: string) => void\r\n    changeTodoListTitle: (title: string, ToDoListId: string) => void\r\n\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    checked: boolean\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport function ToDoList(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addNewTask(title, props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id)\r\n\r\n    return <div className={'toDOList'}>\r\n        <h3><EditableSpan title={props.title} changeTitle={changeTodoListTitle}/></h3>\r\n\r\n        <div>\r\n            Add new task: <AddItemForm onButtonClick={addTask} />\r\n        </div>\r\n\r\n        <ul>\r\n            {props.tasks.map((t) => {\r\n\r\n                const changeTaskTitle = (title: string) => props.changeTaskTitle(title, props.id,t.id)\r\n                const changeTaskStatus = (e: MouseEvent<HTMLInputElement>) =>\r\n                    props.changeTaskStatus(e.currentTarget.checked, props.id, t.id)\r\n\r\n                return <li key={t.id}>\r\n\r\n                <EditableSpan title={t.title}\r\n                              changeTitle={changeTaskTitle}/>\r\n\r\n                <input type='checkbox'\r\n                       checked={t.checked}\r\n                       onClick={changeTaskStatus}/>\r\n\r\n                <button onClick={() => props.deleteLine(t.id, props.id)}>X</button>\r\n\r\n            </li>})}\r\n            <div>\r\n                <button onClick={() => props.changeFilter('completed', props.id)}>COMPLETED</button>\r\n                <button onClick={() => props.changeFilter('active', props.id)}>ACTIVE</button>\r\n                <button onClick={() => props.changeFilter('all', props.id)}>ALL</button>\r\n            </div>\r\n        </ul>\r\n    </div>\r\n}","import React, { useState} from 'react';\nimport './App.css';\nimport {FilterType, TaskType, ToDoList} from \"./components/ToDoList\";\nimport {v1} from \"uuid\";\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\n\ntype ToDoListType = {\n    id: string\n    title: string\n    filter: FilterType\n}\nexport type TasksType = {\n    [key: string]: TaskType[]\n}\n\nfunction App() {\n    const TodoList1 = v1()\n    const TodoList2 = v1()\n    const [todoLists, setTodoLists] = useState<ToDoListType[]>([\n        {id: TodoList1, title: 'Things to do', filter: 'all'},\n        {id: TodoList2, title: 'Hobbies', filter: 'all'}\n    ])\n    const [tasks, setTasks] = useState<TasksType>({\n        [TodoList1]:\n            [{id: v1(), title: 'Meditate', checked: true},\n                {id: v1(), title: 'Work out', checked: true},\n                {id: v1(), title: 'Study', checked: false}],\n        [TodoList2]:\n            [{id: v1(), title: 'Solve the puzzles', checked: true},\n                {id: v1(), title: 'Read', checked: false},\n                {id: v1(), title: 'Sleep', checked: true}]\n    })\n\n    function addNewTask(title: string, TodoListId: string) {\n        const newTask: TaskType = {\n            id: v1(),\n            title,\n            checked: false\n        }\n        setTasks({...tasks, [TodoListId]: [newTask, ...tasks[TodoListId]]})\n    }\n\n    function addNewTodoList(title: string) {\n        const newTodoList: ToDoListType = {\n            id: v1(),\n            title,\n            filter: 'all'\n        }\n        setTodoLists([newTodoList,...todoLists])\n        setTasks({...tasks, [newTodoList.id]: []})\n    }\n\n    function deleteLine(id: string, TodoListId: string) {\n        let tasksLeft = tasks[TodoListId].filter((f) => f.id !== id)\n        setTasks({...tasks, [TodoListId]: tasksLeft})\n    }\n\n    function changeFilter(filter: FilterType, ToDoListId: string) {\n        setTodoLists(todoLists.map(tl => tl.id === ToDoListId ? {...tl, filter: filter} : tl))\n    }\n\n    function changeTodoListTitle(title: string, ToDoListId: string) {\n        setTodoLists(todoLists.map(tl => tl.id === ToDoListId ? {...tl, title: title} : tl))\n    }\n\n    function changeTaskStatus(checked: boolean, ToDoListId: string, taskId: string) {\n        let newTasks = tasks[ToDoListId].map(t => t.id === taskId ? {...t, checked: checked} : t)\n        setTasks({...tasks, [ToDoListId]: newTasks})\n    }\n\n    function changeTaskTitle(title: string, ToDoListId: string, taskId: string) {\n        let newTasks = tasks[ToDoListId].map(t => t.id === taskId ? {...t, title: title} : t)\n        setTasks({...tasks, [ToDoListId]: newTasks})\n    }\n\n    function filteredTasks(todoLists: ToDoListType) {\n        if (todoLists.filter === 'completed') {\n            return tasks[todoLists.id].filter(t => t.checked)\n        }\n        if (todoLists.filter === 'active') {\n            return tasks[todoLists.id].filter(t => !t.checked)\n        } else return tasks[todoLists.id]\n    }\n\n    const todoListsComponents = todoLists.map(tl => {\n        return (\n            <ToDoList id={tl.id}\n                      filter={tl.filter}\n                      title={tl.title}\n                      tasks={filteredTasks(tl)}\n                      deleteLine={deleteLine}\n                      changeFilter={changeFilter}\n                      addNewTask={addNewTask}\n                      changeTaskStatus={changeTaskStatus}\n                      changeTaskTitle={changeTaskTitle}\n                      changeTodoListTitle={changeTodoListTitle}\n            />\n        )\n    });\n    return (\n        <>\n            <AddItemForm onButtonClick={addNewTodoList} />\n            {todoListsComponents}\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}