{"version":3,"sources":["components/EditableSpan/EditableSpan.module.css","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/ToDoList.tsx","components/redux/todolists-reducer.tsx","components/redux/tasks-reducer.tsx","App.tsx","reportWebVitals.ts","components/redux/store.tsx","index.tsx","components/AddItemForm/AddItemForm.module.css"],"names":["module","exports","AddItemForm","props","useState","title","setTitle","error","setError","inputClass","s","errorInput","normalInput","className","value","onChange","e","currentTarget","trim","onClick","onButtonClick","addItemFormButton","errorMessage","EditableSpan","editMode","setEditMode","errorToggle","onBlur","changeTitle","autoFocus","onDoubleClick","ToDoList","changeTodoListTitle","id","deleteTodoList","addNewTask","tasks","map","t","changeTaskTitle","type","checked","changeTaskStatus","deleteLine","changeFilter","ADD_TODO_LIST","DELETE_TODO_LIST","CHANGE_TODO_LIST_TITLE","CHANGE_FILTER","TodoList1","v1","TodoList2","initState","filter","ADD_NEW_TASK","DELETE_TASK","CHANGE_TASK_STATUS","CHANGE_TASK_TITLE","App","useSelector","state","todoLists","dispatch","useDispatch","todoListId","addNewTaskAC","deleteTask","taskId","deleteTaskAC","changeTaskStatusAC","changeTaskTitleAC","action","deleteTodoListAC","changeFilterAC","changeTodoListTitleAC","filteredTasks","todoListsComponents","tl","addTodoListAC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","stateCopy","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,WAAa,iCAAiC,YAAc,oC,iKCQvE,SAASC,EAAYC,GAA8B,IAAD,EAE3BC,mBAAS,IAFkB,mBAE9CC,EAF8C,KAEvCC,EAFuC,OAG3BF,oBAAS,GAHkB,mBAG9CG,EAH8C,KAGvCC,EAHuC,KAkB/CC,EAAcF,EAAQG,IAAEC,WAAaD,IAAEE,YAE7C,OACI,qCACI,uBAAOC,UAAWJ,EACXK,MAAOT,EACPU,SAnBS,SAACC,GACrBV,EAASU,EAAEC,cAAcH,OACQ,KAAjCE,EAAEC,cAAcH,MAAMI,OAAgBV,GAAS,GAAQA,GAAS,MAkB5D,wBAAQW,QAhBa,WACrBd,GACAF,EAAMiB,cAAcf,GACpBC,EAAS,KAETE,GAAS,IAYDK,UAAWH,IAAEW,kBADrB,iBAECd,EAAQ,sBAAMM,UAAWH,IAAEY,aAAnB,6BAA0D,4B,qBC5BxE,SAASC,EAAapB,GAA+B,IAAD,EACvBC,oBAAS,GADc,mBAChDoB,EADgD,KACtCC,EADsC,OAE7BrB,mBAASD,EAAME,OAFc,mBAEhDA,EAFgD,KAEzCC,EAFyC,OAG7BF,oBAAS,GAHoB,mBAGhDG,EAHgD,KAGzCC,EAHyC,KAqBjDkB,EAAcnB,EAAQG,IAAEC,WAAaD,IAAEE,YAE7C,OAAO,mCACEY,EACK,uBAAOX,UAAWa,EACXC,OAnBD,WACZtB,GACAoB,GAAY,GACZtB,EAAMyB,YAAYvB,IAElBG,GAAS,IAeIM,MAAOT,EACPU,SAZG,SAACC,GACrBV,EAASU,EAAEC,cAAcH,OACQ,KAAjCE,EAAEC,cAAcH,MAAMI,OAAgBV,GAAS,GAAQA,GAAS,IAUpBqB,WAAS,IAC3C,sBAAMC,cAxBK,kBAAML,GAAY,IAwB7B,SAAwCtB,EAAME,UCbzD,SAAS0B,EAAS5B,GAOrB,OAAO,sBAAKU,UAAW,WAAhB,UACH,+BAAI,cAACU,EAAD,CAAclB,MAAOF,EAAME,MAAOuB,YAHd,SAACvB,GAAD,OAAmBF,EAAM6B,oBAAoB3B,EAAOF,EAAM8B,OAI9E,wBAAQd,QAAS,kBAAMhB,EAAM+B,eAAe/B,EAAM8B,KAAlD,oBAGJ,iDACkB,cAAC/B,EAAD,CAAakB,cAZnB,SAACf,GACbF,EAAMgC,WAAW9B,EAAOF,EAAM8B,UAc9B,+BACK9B,EAAMiC,MAAMC,KAAI,SAACC,GAMd,OAAO,+BAEP,cAACf,EAAD,CAAclB,MAAOiC,EAAEjC,MACTuB,YAPU,SAACvB,GAAD,OAAmBF,EAAMoC,gBAAgBlC,EAAOF,EAAM8B,GAAGK,EAAEL,OASnF,uBAAOO,KAAK,WACLC,QAASH,EAAEG,QACXtB,QAVkB,SAACH,GAAD,OACrBb,EAAMuC,iBAAiB1B,EAAEC,cAAcwB,QAAStC,EAAM8B,GAAIK,EAAEL,OAWhE,wBAAQd,QAAS,kBAAMhB,EAAMwC,WAAWL,EAAEL,GAAI9B,EAAM8B,KAApD,iBATgBK,EAAEL,OAYtB,gCACI,wBAAQd,QAAS,kBAAMhB,EAAMyC,aAAa,YAAazC,EAAM8B,KAA7D,uBACA,wBAAQd,QAAS,kBAAMhB,EAAMyC,aAAa,SAAUzC,EAAM8B,KAA1D,oBACA,wBAAQd,QAAS,kBAAMhB,EAAMyC,aAAa,MAAOzC,EAAM8B,KAAvD,0B,oCC5DHY,EAAgB,gBAChBC,EAAmB,mBAC1BC,EAAyB,yBACzBC,EAAgB,gBAaTC,EAAYC,cACZC,EAAYD,cAEnBE,EAA4B,CAC9B,CAACnB,GAAIgB,EAAW5C,MAAO,eAAgBgD,OAAQ,OAC/C,CAACpB,GAAIkB,EAAW9C,MAAO,UAAWgD,OAAQ,Q,OCpBxCC,EAAe,eACfC,EAAc,cACdC,EAAqB,qBACrBC,EAAoB,oBAMpBL,GAAS,mBACVH,EACG,CAAC,CAAChB,GAAIiB,cAAM7C,MAAO,WAAYoC,SAAS,GACpC,CAACR,GAAIiB,cAAM7C,MAAO,WAAYoC,SAAS,GACvC,CAACR,GAAIiB,cAAM7C,MAAO,QAASoC,SAAS,KAJjC,cAKVU,EACG,CAAC,CAAClB,GAAIiB,cAAM7C,MAAO,oBAAqBoC,SAAS,GAC7C,CAACR,GAAIiB,cAAM7C,MAAO,OAAQoC,SAAS,GACnC,CAACR,GAAIiB,cAAM7C,MAAO,QAASoC,SAAS,KARjC,GCgFAiB,MA9Ef,WAEI,IAAMtB,EAAQuB,aAAY,SAACC,GAAD,OAAsBA,EAAMxB,SAChDyB,EAAYF,aAAY,SAACC,GAAD,OAAsBA,EAAMC,aACpDC,EAAWC,cAIjB,SAAS5B,EAAW9B,EAAe2D,GAC/BF,ED+BoB,SAACzD,EAAe2D,GACxC,MAAO,CACHxB,KAAMc,EACNjD,QACA2D,cCnCSC,CAAa5D,EAAO2D,IAGjC,SAASE,EAAWC,EAAgBH,GAChCF,EDkCoB,SAACK,EAAgBH,GACzC,MAAO,CACHxB,KAAMe,EACNY,SACAH,cCtCSI,CAAaD,EAAQH,IAGlC,SAAStB,EAAiBD,EAAkBuB,EAAoBG,GAC5DL,EDqC0B,SAACrB,EAAkBuB,EAAoBG,GACrE,MAAO,CACH3B,KAAMgB,EACNW,SACAH,aACAvB,WC1CS4B,CAAmB5B,EAASuB,EAAYG,IAGrD,SAAS5B,EAAgBlC,EAAe2D,EAAoBG,GACxDL,EDyCyB,SAACzD,EAAe2D,EAAoBG,GACjE,MAAO,CACH3B,KAAMiB,EACNU,SACAH,aACA3D,SC9CSiE,CAAkBjE,EAAO2D,EAAYG,IAUlD,SAASjC,EAAe8B,GACpB,IAAMO,EFKkB,SAACP,GAC7B,MAAO,CACHxB,KAAMM,EACNkB,cEReQ,CAAiBR,GAChCF,EAASS,GAGb,SAAS3B,EAAaS,EAAoBW,GACtCF,EFasB,SAACT,EAAoBW,GAC/C,MAAO,CACHxB,KAAMQ,EACNK,SACAW,cEjBSS,CAAepB,EAAOW,IAGnC,SAAShC,EAAoB3B,EAAe2D,GACxCF,EFE6B,SAACzD,EAAe2D,GACjD,MAAO,CACHxB,KAAMO,EACN1C,QACA2D,cENSU,CAAsBrE,EAAO2D,IAI1C,SAASW,EAAcd,GACnB,MAAyB,cAArBA,EAAUR,OACHjB,EAAMyB,EAAU5B,IAAIoB,QAAO,SAAAf,GAAC,OAAIA,EAAEG,WAEpB,WAArBoB,EAAUR,OACHjB,EAAMyB,EAAU5B,IAAIoB,QAAO,SAAAf,GAAC,OAAKA,EAAEG,WAChCL,EAAMyB,EAAU5B,IAGlC,IAAM2C,EAAsBf,EAAUxB,KAAI,SAAAwC,GACtC,OACI,cAAC9C,EAAD,CAAUE,GAAI4C,EAAG5C,GACPoB,OAAQwB,EAAGxB,OACXhD,MAAOwE,EAAGxE,MACV+B,MAAOuC,EAAcE,GACrBlC,WAAYuB,EACZtB,aAAcA,EACdT,WAAYA,EACZO,iBAAkBA,EAClBH,gBAAiBA,EACjBP,oBAAqBA,EACrBE,eAAgBA,OAIlC,OACI,qCACI,cAAChC,EAAD,CAAakB,cA9CrB,SAAwBf,GACpB,IAAMkE,EFGe,SAAClE,GAC1B,MAAO,CACHmC,KAAMK,EACNxC,QACA2D,WAAYd,eEPG4B,CAAczE,GAC7ByD,EAASS,MA6CJK,MCzEEG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCLRQ,EAAWC,YAAgB,CAC7BrD,MHoBwB,WAAyE,IAAxEwB,EAAuE,uDAAjDR,EAAWmB,EAAsC,uCAChG,OAAQA,EAAO/B,MACX,KAAKc,EACD,OAAO,2BAAIM,GAAX,kBACCW,EAAOP,WADR,CACsB,CAAC/B,GAAIiB,cAAM7C,MAAOkE,EAAOlE,MAAOoC,SAAS,IAD/D,mBACyEmB,EAAMW,EAAOP,gBAE1F,KAAKT,EACD,OAAO,2BAAIK,GAAX,kBAAmBW,EAAOP,WAAaJ,EAAMW,EAAOP,YAAYX,QAAO,SAAAf,GAAC,OAAIA,EAAEL,KAAOsC,EAAOJ,YAEhG,KAAKX,EACD,OAAO,2BAAII,GAAX,kBACKW,EAAOP,WAAaJ,EAAMW,EAAOP,YAAY3B,KAAI,SAAAC,GAAC,OAAIA,EAAEL,KAAOsC,EAAOJ,OAAhB,2BAA6B7B,GAA7B,IAAgCG,QAAS8B,EAAO9B,UAAWH,OAE1H,KAAKmB,EACD,OAAO,2BAAIG,GAAX,kBACKW,EAAOP,WAAaJ,EAAMW,EAAOP,YAAY3B,KAAI,SAAAC,GAAC,OAAIA,EAAEL,KAAOsC,EAAOJ,OAAhB,2BAA6B7B,GAA7B,IAAgCjC,MAAOkE,EAAOlE,QAASiC,OAEtH,KAAKO,EACD,OAAO,2BAAIe,GAAX,kBAAmBW,EAAOP,WAAa,KAE3C,KAAKlB,EACD,IAAM4C,EAAS,eAAO9B,GAEtB,cADO8B,EAAUnB,EAAOP,YACjB0B,EAEX,QAAS,OAAO9B,IG5CpBC,UJoB4B,WAA4D,IAA3DD,EAA0D,uDAAlDR,EAAWmB,EAAuC,uCACvF,OAAQA,EAAO/B,MACX,KAAKK,EACD,MAAM,GAAN,mBAAWe,GAAX,CAAkB,CAAC3B,GAAIsC,EAAOP,WAAY3D,MAAOkE,EAAOlE,MAAOgD,OAAQ,SAE3E,KAAKP,EACD,OAAOc,EAAMP,QAAO,SAAAwB,GAAE,OAAIA,EAAG5C,KAAOsC,EAAOP,cAE/C,KAAKjB,EACD,OAAOa,EAAMvB,KAAI,SAAAwC,GAAE,OAAIA,EAAG5C,KAAOsC,EAAOP,WAAjB,2BAAkCa,GAAlC,IAAsCxE,MAAOkE,EAAOlE,QAASwE,KAExF,KAAK7B,EACD,OAAOY,EAAMvB,KAAI,SAAAwC,GAAE,OAAIA,EAAG5C,KAAOsC,EAAOP,WAAjB,2BAAkCa,GAAlC,IAAsCxB,OAAQkB,EAAOlB,SAAUwB,KAE1F,QAAS,OAAQjB,MI/BZ+B,EAAQC,YAAYJ,GCDjCK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRK,SAASC,eAAe,SAM5BlB,K,kBCnBA/E,EAAOC,QAAU,CAAC,kBAAoB,uCAAuC,WAAa,gCAAgC,YAAc,iCAAiC,aAAe,qC","file":"static/js/main.beb4ea16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"EditableSpan_errorInput__27oor\",\"normalInput\":\"EditableSpan_normalInput__3CVqX\"};","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './AddItemForm.module.css'\r\n\r\ntype AddItemFormPropsType = {\r\n    onButtonClick: (title: string) => void\r\n}\r\n\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        e.currentTarget.value.trim() === '' ? setError(true) : setError(false)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        if (title) {\r\n            props.onButtonClick(title)\r\n            setTitle('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const inputClass  = error ? s.errorInput : s.normalInput\r\n\r\n    return (\r\n        <>\r\n            <input className={inputClass}\r\n                   value={title}\r\n                   onChange={onChangeHandler} />\r\n            <button onClick={onButtonClickHandler}\r\n                    className={s.addItemFormButton}>ADD</button>\r\n            {error ? <span className={s.errorMessage}> input is empty</span> : <span></span>}\r\n        </>\r\n    )\r\n}","import React, {useState, ChangeEvent} from \"react\";\r\nimport s from './EditableSpan.module.css'\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n    const [error, setError] = useState(false)\r\n\r\n    const ActivateEditMode = () => setEditMode(true)\r\n\r\n    const setNewTitle = () => {\r\n        if (title) {\r\n            setEditMode(false)\r\n            props.changeTitle(title)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        e.currentTarget.value.trim() === '' ? setError(true) : setError(false)\r\n    }\r\n\r\n    const errorToggle = error ? s.errorInput : s.normalInput\r\n\r\n    return <>\r\n            {editMode\r\n                ? <input className={errorToggle}\r\n                         onBlur={setNewTitle}\r\n                         value={title}\r\n                         onChange={onChangeHandler} autoFocus/>\r\n                : <span onDoubleClick={ActivateEditMode}>{props.title}</span>}\r\n    </>\r\n}","import React, {MouseEvent} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan/EditableSpan\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    filter: FilterType\r\n    title: string\r\n    tasks: TaskType[]\r\n    deleteLine: (id: string, TLId: string) => void\r\n    changeFilter: (filter: FilterType, TLid: string) => void\r\n    addNewTask: (title: string, TLId: string) => void\r\n    changeTaskStatus: (checked: boolean, TLId: string, taskId: string) => void\r\n    changeTaskTitle: (title: string, TLId: string, taskId: string) => void\r\n    changeTodoListTitle: (title: string, ToDoListId: string) => void\r\n    deleteTodoList: (todoListId: string) => void\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    checked: boolean\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport function ToDoList(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addNewTask(title, props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id)\r\n\r\n    return <div className={'toDOList'}>\r\n        <h3><EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n            <button onClick={() => props.deleteTodoList(props.id)}> X </button></h3>\r\n\r\n\r\n        <div>\r\n            Add new task: <AddItemForm onButtonClick={addTask} />\r\n        </div>\r\n\r\n        <ul>\r\n            {props.tasks.map((t) => {\r\n\r\n                const changeTaskTitle = (title: string) => props.changeTaskTitle(title, props.id,t.id)\r\n                const changeTaskStatus = (e: MouseEvent<HTMLInputElement>) =>\r\n                    props.changeTaskStatus(e.currentTarget.checked, props.id, t.id)\r\n\r\n                return <li key={t.id}>\r\n\r\n                <EditableSpan title={t.title}\r\n                              changeTitle={changeTaskTitle}/>\r\n\r\n                <input type='checkbox'\r\n                       checked={t.checked}\r\n                       onClick={changeTaskStatus}/>\r\n\r\n                <button onClick={() => props.deleteLine(t.id, props.id)}>X</button>\r\n\r\n            </li>})}\r\n            <div>\r\n                <button onClick={() => props.changeFilter('completed', props.id)}>COMPLETED</button>\r\n                <button onClick={() => props.changeFilter('active', props.id)}>ACTIVE</button>\r\n                <button onClick={() => props.changeFilter('all', props.id)}>ALL</button>\r\n            </div>\r\n        </ul>\r\n    </div>\r\n}","import {v1} from \"uuid\";\r\n\r\nexport const ADD_TODO_LIST = 'ADD_TODO_LIST'\r\nexport const DELETE_TODO_LIST = 'DELETE_TODO_LIST'\r\nconst CHANGE_TODO_LIST_TITLE = 'CHANGE_TODO_LIST_TITLE'\r\nconst CHANGE_FILTER = 'CHANGE_FILTER'\r\n\r\ntype ActionType = ReturnType<typeof addTodoListAC> | ReturnType<typeof deleteTodoListAC> |\r\n    ReturnType<typeof changeTodoListTitleAC> | ReturnType<typeof changeFilterAC>\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\n\r\nexport const TodoList1 = v1()\r\nexport const TodoList2 = v1()\r\n\r\nconst initState: TodoListType[] = [\r\n    {id: TodoList1, title: 'Things to do', filter: 'all'},\r\n    {id: TodoList2, title: 'Hobbies', filter: 'all'}\r\n]\r\n\r\nexport const todoListsReducer = (state = initState, action: ActionType): TodoListType[] => {\r\n    switch (action.type) {\r\n        case ADD_TODO_LIST:\r\n            return [...state, {id: action.todoListId, title: action.title, filter: 'all'}]\r\n\r\n        case DELETE_TODO_LIST:\r\n            return state.filter(tl => tl.id !== action.todoListId)\r\n\r\n        case CHANGE_TODO_LIST_TITLE:\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, title: action.title} : tl)\r\n\r\n        case CHANGE_FILTER:\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, filter: action.filter} : tl)\r\n\r\n        default: return  state\r\n    }\r\n}\r\n\r\nexport const addTodoListAC = (title: string) => {\r\n    return {\r\n        type: ADD_TODO_LIST,\r\n        title,\r\n        todoListId: v1(),\r\n    } as const\r\n}\r\nexport const deleteTodoListAC = (todoListId: string) => {\r\n    return {\r\n        type: DELETE_TODO_LIST,\r\n        todoListId,\r\n    } as const\r\n}\r\nexport const changeTodoListTitleAC = (title: string, todoListId: string) => {\r\n    return {\r\n        type: CHANGE_TODO_LIST_TITLE,\r\n        title,\r\n        todoListId,\r\n    } as const\r\n}\r\nexport const changeFilterAC = (filter: FilterType, todoListId: string) => {\r\n    return {\r\n        type: CHANGE_FILTER,\r\n        filter,\r\n        todoListId,\r\n    } as const\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {ADD_TODO_LIST, addTodoListAC, DELETE_TODO_LIST, deleteTodoListAC, TodoList1, TodoList2} from \"./todolists-reducer\";\r\n\r\nconst ADD_NEW_TASK = 'ADD_NEW_TASK'\r\nconst DELETE_TASK = 'DELETE_TASK'\r\nconst CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS'\r\nconst CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE'\r\n\r\ntype ActionType = ReturnType<typeof addNewTaskAC> | ReturnType<typeof deleteTaskAC> |\r\n    ReturnType<typeof changeTaskStatusAC> | ReturnType<typeof changeTaskTitleAC> |\r\n    ReturnType<typeof addTodoListAC> | ReturnType<typeof deleteTodoListAC>\r\n\r\nconst initState = {\r\n    [TodoList1]:\r\n        [{id: v1(), title: 'Meditate', checked: true},\r\n            {id: v1(), title: 'Work out', checked: true},\r\n            {id: v1(), title: 'Study', checked: false}],\r\n    [TodoList2]:\r\n        [{id: v1(), title: 'Solve the puzzles', checked: true},\r\n            {id: v1(), title: 'Read', checked: false},\r\n            {id: v1(), title: 'Sleep', checked: true}]\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const tasksReducer = (state:InitStateType = initState, action: ActionType): InitStateType => {\r\n    switch (action.type) {\r\n        case ADD_NEW_TASK:\r\n            return {...state,\r\n            [action.todoListId]: [{id: v1(), title: action.title, checked: false},...state[action.todoListId]]}\r\n\r\n        case DELETE_TASK:\r\n            return {...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\r\n\r\n        case CHANGE_TASK_STATUS:\r\n            return {...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, checked: action.checked} : t)}\r\n\r\n        case CHANGE_TASK_TITLE:\r\n            return {...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, title: action.title} : t)}\r\n\r\n        case ADD_TODO_LIST:\r\n            return {...state, [action.todoListId]: []}\r\n\r\n        case DELETE_TODO_LIST:\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListId]\r\n            return stateCopy\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const addNewTaskAC = (title: string, todoListId: string) => {\r\n    return {\r\n        type: ADD_NEW_TASK,\r\n        title,\r\n        todoListId,\r\n    } as const\r\n}\r\nexport const deleteTaskAC = (taskId: string, todoListId: string) => {\r\n    return {\r\n        type: DELETE_TASK,\r\n        taskId,\r\n        todoListId,\r\n    } as const\r\n}\r\nexport const changeTaskStatusAC = (checked: boolean, todoListId: string, taskId: string) => {\r\n    return {\r\n        type: CHANGE_TASK_STATUS,\r\n        taskId,\r\n        todoListId,\r\n        checked,\r\n    } as const\r\n}\r\nexport const changeTaskTitleAC = (title: string, todoListId: string, taskId: string) => {\r\n    return {\r\n        type: CHANGE_TASK_TITLE,\r\n        taskId,\r\n        todoListId,\r\n        title,\r\n    } as const\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {FilterType,ToDoList} from \"./components/ToDoList\";\r\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"./components/redux/store\";\r\nimport {\r\n    addTodoListAC,\r\n    changeFilterAC, changeTodoListTitleAC,\r\n    deleteTodoListAC,\r\n    TodoListType\r\n} from \"./components/redux/todolists-reducer\";\r\nimport {addNewTaskAC, changeTaskStatusAC, changeTaskTitleAC, deleteTaskAC} from \"./components/redux/tasks-reducer\";\r\n\r\nfunction App() {\r\n\r\n    const tasks = useSelector((state: RootState) => state.tasks)\r\n    const todoLists = useSelector((state: RootState) => state.todoLists)\r\n    const dispatch = useDispatch()\r\n\r\n// dispatch for tasks:\r\n\r\n    function addNewTask(title: string, todoListId: string) {\r\n        dispatch(addNewTaskAC(title, todoListId))\r\n    }\r\n\r\n    function deleteTask(taskId: string, todoListId: string) {\r\n        dispatch(deleteTaskAC(taskId, todoListId))\r\n    }\r\n\r\n    function changeTaskStatus(checked: boolean, todoListId: string, taskId: string) {\r\n        dispatch(changeTaskStatusAC(checked, todoListId, taskId))\r\n    }\r\n\r\n    function changeTaskTitle(title: string, todoListId: string, taskId: string) {\r\n        dispatch(changeTaskTitleAC(title, todoListId, taskId))\r\n    }\r\n\r\n//dispatch for todoLists\r\n\r\n    function addNewTodoList(title: string) {\r\n        const action = addTodoListAC(title)\r\n        dispatch(action)\r\n    }\r\n\r\n    function deleteTodoList(todoListId: string) {\r\n        const action = deleteTodoListAC(todoListId)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeFilter(filter: FilterType, todoListId: string) {\r\n        dispatch(changeFilterAC(filter,todoListId))\r\n    }\r\n\r\n    function changeTodoListTitle(title: string, todoListId: string) {\r\n        dispatch(changeTodoListTitleAC(title, todoListId))\r\n    }\r\n\r\n\r\n    function filteredTasks(todoLists: TodoListType) {\r\n        if (todoLists.filter === 'completed') {\r\n            return tasks[todoLists.id].filter(t => t.checked)\r\n        }\r\n        if (todoLists.filter === 'active') {\r\n            return tasks[todoLists.id].filter(t => !t.checked)\r\n        } else return tasks[todoLists.id]\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <ToDoList id={tl.id}\r\n                      filter={tl.filter}\r\n                      title={tl.title}\r\n                      tasks={filteredTasks(tl)}\r\n                      deleteLine={deleteTask}\r\n                      changeFilter={changeFilter}\r\n                      addNewTask={addNewTask}\r\n                      changeTaskStatus={changeTaskStatus}\r\n                      changeTaskTitle={changeTaskTitle}\r\n                      changeTodoListTitle={changeTodoListTitle}\r\n                      deleteTodoList={deleteTodoList}\r\n            />\r\n        )\r\n    });\r\n    return (\r\n        <>\r\n            <AddItemForm onButtonClick={addNewTodoList}/>\r\n            {todoListsComponents}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todoListsReducer} from \"./todolists-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n})\r\n\r\nexport const store = createStore(reducers)\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./components/redux/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemFormButton\":\"AddItemForm_addItemFormButton__2jwKN\",\"errorInput\":\"AddItemForm_errorInput__3u859\",\"normalInput\":\"AddItemForm_normalInput__2xlQZ\",\"errorMessage\":\"AddItemForm_errorMessage__ldR7c\"};"],"sourceRoot":""}