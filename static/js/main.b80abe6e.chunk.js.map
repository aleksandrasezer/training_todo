{"version":3,"sources":["components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/ToDoList.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/AddItemForm/AddItemForm.module.css","components/EditableSpan/EditableSpan.module.css"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","inputClass","s","errorInput","normalInput","className","value","onChange","e","currentTarget","trim","onClick","onButtonClick","addItemFormButton","errorMessage","EditableSpan","editMode","setEditMode","errorToggle","onBlur","changeTitle","autoFocus","onDoubleClick","ToDoList","changeTodoListTitle","id","deleteTodoList","addNewTask","tasks","map","t","changeTaskTitle","type","checked","changeTaskStatus","deleteLine","changeFilter","App","TodoList1","v1","TodoList2","filter","todoLists","setTodoLists","setTasks","TodoListId","newTask","todoListId","tl","tasksLeft","f","ToDoListId","taskId","newTasks","filteredTasks","todoListsComponents","newTodoList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b80abe6e.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './AddItemForm.module.css'\r\n\r\ntype AddItemFormPropsType = {\r\n    onButtonClick: (title: string) => void\r\n}\r\n\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        e.currentTarget.value.trim() === '' ? setError(true) : setError(false)\r\n    }\r\n    const onButtonClickHandler = () => {\r\n        if (title) {\r\n            props.onButtonClick(title)\r\n            setTitle('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const inputClass  = error ? s.errorInput : s.normalInput\r\n\r\n    return (\r\n        <>\r\n            <input className={inputClass}\r\n                   value={title}\r\n                   onChange={onChangeHandler} />\r\n            <button onClick={onButtonClickHandler}\r\n                    className={s.addItemFormButton}>ADD</button>\r\n            {error ? <span className={s.errorMessage}> input is empty</span> : <span></span>}\r\n        </>\r\n    )\r\n}","import React, {useState, ChangeEvent} from \"react\";\r\nimport s from './EditableSpan.module.css'\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n    const [error, setError] = useState(false)\r\n\r\n    const ActivateEditMode = () => setEditMode(true)\r\n\r\n    const setNewTitle = () => {\r\n        if (title) {\r\n            setEditMode(false)\r\n            props.changeTitle(title)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        e.currentTarget.value.trim() === '' ? setError(true) : setError(false)\r\n    }\r\n\r\n    const errorToggle = error ? s.errorInput : s.normalInput\r\n\r\n    return <>\r\n            {editMode\r\n                ? <input className={errorToggle}\r\n                         onBlur={setNewTitle}\r\n                         value={title}\r\n                         onChange={onChangeHandler} autoFocus/>\r\n                : <span onDoubleClick={ActivateEditMode}>{props.title}</span>}\r\n    </>\r\n}","import React, {MouseEvent} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan/EditableSpan\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    filter: FilterType\r\n    title: string\r\n    tasks: TaskType[]\r\n    deleteLine: (id: string, TLId: string) => void\r\n    changeFilter: (filter: FilterType, TLid: string) => void\r\n    addNewTask: (title: string, TLId: string) => void\r\n    changeTaskStatus: (checked: boolean, TLId: string, taskId: string) => void\r\n    changeTaskTitle: (title: string, TLId: string, taskId: string) => void\r\n    changeTodoListTitle: (title: string, ToDoListId: string) => void\r\n    deleteTodoList: (todoListId: string) => void\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    checked: boolean\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport function ToDoList(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addNewTask(title, props.id)\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id)\r\n\r\n    return <div className={'toDOList'}>\r\n        <h3><EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n            <button onClick={() => props.deleteTodoList(props.id)}> X </button></h3>\r\n\r\n\r\n        <div>\r\n            Add new task: <AddItemForm onButtonClick={addTask} />\r\n        </div>\r\n\r\n        <ul>\r\n            {props.tasks.map((t) => {\r\n\r\n                const changeTaskTitle = (title: string) => props.changeTaskTitle(title, props.id,t.id)\r\n                const changeTaskStatus = (e: MouseEvent<HTMLInputElement>) =>\r\n                    props.changeTaskStatus(e.currentTarget.checked, props.id, t.id)\r\n\r\n                return <li key={t.id}>\r\n\r\n                <EditableSpan title={t.title}\r\n                              changeTitle={changeTaskTitle}/>\r\n\r\n                <input type='checkbox'\r\n                       checked={t.checked}\r\n                       onClick={changeTaskStatus}/>\r\n\r\n                <button onClick={() => props.deleteLine(t.id, props.id)}>X</button>\r\n\r\n            </li>})}\r\n            <div>\r\n                <button onClick={() => props.changeFilter('completed', props.id)}>COMPLETED</button>\r\n                <button onClick={() => props.changeFilter('active', props.id)}>ACTIVE</button>\r\n                <button onClick={() => props.changeFilter('all', props.id)}>ALL</button>\r\n            </div>\r\n        </ul>\r\n    </div>\r\n}","import React, { useState} from 'react';\r\nimport './App.css';\r\nimport {FilterType, TaskType, ToDoList} from \"./components/ToDoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\r\n\r\ntype ToDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\nexport type TasksType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    const TodoList1 = v1()\r\n    const TodoList2 = v1()\r\n    const [todoLists, setTodoLists] = useState<ToDoListType[]>([\r\n        {id: TodoList1, title: 'Things to do', filter: 'all'},\r\n        {id: TodoList2, title: 'Hobbies', filter: 'all'}\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksType>({\r\n        [TodoList1]:\r\n            [{id: v1(), title: 'Meditate', checked: true},\r\n                {id: v1(), title: 'Work out', checked: true},\r\n                {id: v1(), title: 'Study', checked: false}],\r\n        [TodoList2]:\r\n            [{id: v1(), title: 'Solve the puzzles', checked: true},\r\n                {id: v1(), title: 'Read', checked: false},\r\n                {id: v1(), title: 'Sleep', checked: true}]\r\n    })\r\n\r\n    function addNewTask(title: string, TodoListId: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title,\r\n            checked: false\r\n        }\r\n        setTasks({...tasks, [TodoListId]: [newTask, ...tasks[TodoListId]]})\r\n    }\r\n\r\n    function addNewTodoList(title: string) {\r\n        const newTodoList: ToDoListType = {\r\n            id: v1(),\r\n            title,\r\n            filter: 'all'\r\n        }\r\n        setTodoLists([newTodoList,...todoLists])\r\n        setTasks({...tasks, [newTodoList.id]: []})\r\n    }\r\n\r\n    const deleteTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n    }\r\n\r\n    function deleteLine(id: string, TodoListId: string) {\r\n        let tasksLeft = tasks[TodoListId].filter((f) => f.id !== id)\r\n        setTasks({...tasks, [TodoListId]: tasksLeft})\r\n    }\r\n\r\n    function changeFilter(filter: FilterType, ToDoListId: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === ToDoListId ? {...tl, filter: filter} : tl))\r\n    }\r\n\r\n    function changeTodoListTitle(title: string, ToDoListId: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === ToDoListId ? {...tl, title: title} : tl))\r\n    }\r\n\r\n    function changeTaskStatus(checked: boolean, ToDoListId: string, taskId: string) {\r\n        let newTasks = tasks[ToDoListId].map(t => t.id === taskId ? {...t, checked: checked} : t)\r\n        setTasks({...tasks, [ToDoListId]: newTasks})\r\n    }\r\n\r\n    function changeTaskTitle(title: string, ToDoListId: string, taskId: string) {\r\n        let newTasks = tasks[ToDoListId].map(t => t.id === taskId ? {...t, title: title} : t)\r\n        setTasks({...tasks, [ToDoListId]: newTasks})\r\n    }\r\n\r\n    function filteredTasks(todoLists: ToDoListType) {\r\n        if (todoLists.filter === 'completed') {\r\n            return tasks[todoLists.id].filter(t => t.checked)\r\n        }\r\n        if (todoLists.filter === 'active') {\r\n            return tasks[todoLists.id].filter(t => !t.checked)\r\n        } else return tasks[todoLists.id]\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <ToDoList id={tl.id}\r\n                      filter={tl.filter}\r\n                      title={tl.title}\r\n                      tasks={filteredTasks(tl)}\r\n                      deleteLine={deleteLine}\r\n                      changeFilter={changeFilter}\r\n                      addNewTask={addNewTask}\r\n                      changeTaskStatus={changeTaskStatus}\r\n                      changeTaskTitle={changeTaskTitle}\r\n                      changeTodoListTitle={changeTodoListTitle}\r\n                      deleteTodoList={deleteTodoList}\r\n            />\r\n        )\r\n    });\r\n    return (\r\n        <>\r\n            <AddItemForm onButtonClick={addNewTodoList} />\r\n            {todoListsComponents}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemFormButton\":\"AddItemForm_addItemFormButton__2jwKN\",\"errorInput\":\"AddItemForm_errorInput__3u859\",\"normalInput\":\"AddItemForm_normalInput__2xlQZ\",\"errorMessage\":\"AddItemForm_errorMessage__ldR7c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"EditableSpan_errorInput__27oor\",\"normalInput\":\"EditableSpan_normalInput__3CVqX\"};"],"sourceRoot":""}